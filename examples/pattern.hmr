data Zero 
   | Succ Expr 
   | Add Expr Expr 
   | Mul Expr Expr 
   : Expr

data ENil | ECons Expr EList : EList
data INil | ICons Int  IList : IList

let testCase e = case e of 
  { Add Zero Zero   -> pure 1
  | Mul Zero x      -> pure 2
  | Add (Succ x) y  -> pure 3
  | Mul x Zero      -> pure 4
  | Mul (Add x y) z -> pure 5
  | Add x Zero      -> pure 6
  | x -> pure 7 }

effect State { !get : Top => EList
             | !set : EList => Top }

let state = handler { pure x   -> pure (\_ . pure x)
                    | !get x k -> pure (\s . k s  s)
                    | !set s k -> pure (\_ . k () s) }

let pushEntry e = do { s <- !get(); s' <- ECons e s; !set(s'); !get() }

let inputs _ = do {
  succ1 <- Succ Zero;      add11 <- Add Zero Zero;
  t <- Add Zero  Zero;     pushEntry t;
  t <- Add succ1 Zero;     pushEntry t;
  t <- Add Zero  succ1;    pushEntry t;
  t <- Add succ1 succ1;    pushEntry t;
  t <- Mul Zero  Zero;     pushEntry t;
  t <- Mul succ1 Zero;     pushEntry t;
  t <- Mul Zero  succ1;    pushEntry t;
  t <- Mul succ1 succ1;    pushEntry t;
  t <- Mul add11 succ1;    pushEntry t;
  t <- Add add11 Zero;     pushEntry t;
  !get()
}

letrec test l = case l of
  { ECons x xs -> do {
      res <- testCase x;
      ress <- test xs;
      ICons res ress }
  | ENil -> pure INil }

main = do {
  f <- with state handle inputs ();
  inputs' <- f ENil;
  test inputs'
  -- expected: 6 5 7 2 4 2 3 7 3 1
}
